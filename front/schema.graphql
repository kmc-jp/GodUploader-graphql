type Account implements Node {
  """The ID of the object."""
  id: ID!
  kmcid: String!
  name: String!
  artworksCount: Int!
  lastLoggedIn: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  artworks(before: String, after: String, first: Int, last: Int): ArtworkConnection
  comments(before: String, after: String, first: Int, last: Int): CommentConnection
  likes(before: String, after: String, first: Int, last: Int): LikeConnection

  """ログインユーザーかどうか"""
  isYou: Boolean!
}

type AccountConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AccountEdge]!
}

"""A Relay edge containing a `Account` and its cursor."""
type AccountEdge {
  """The item at the end of the edge"""
  node: Account

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum AccountSortEnum {
  ID_ASC
  ID_DESC
  KMCID_ASC
  KMCID_DESC
  NAME_ASC
  NAME_DESC
  ARTWORKS_COUNT_ASC
  ARTWORKS_COUNT_DESC
  LAST_LOGGED_IN_ASC
  LAST_LOGGED_IN_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Artwork implements Node {
  """The ID of the object."""
  id: ID!
  accountId: Int!
  title: String!
  caption: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  illusts(before: String, after: String, first: Int, last: Int): IllustConnection
  comments(before: String, after: String, first: Int, last: Int): CommentConnection
  likes(before: String, after: String, first: Int, last: Int): LikeConnection
  tags(before: String, after: String, first: Int, last: Int): TagConnection
  account: Account
  nsfw: Boolean!
  rating: ArtworkRatingEnum!
  topIllust: Illust

  """この作品より1つ新しい、同じユーザーの作品を返す"""
  nextArtwork: Artwork

  """この作品より1つ古い、同じユーザーの作品を返す"""
  previousArtwork: Artwork

  """作品の情報を編集できるかどうかを返す"""
  editable: Boolean!
}

type ArtworkConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ArtworkEdge]!
}

"""A Relay edge containing a `Artwork` and its cursor."""
type ArtworkEdge {
  """The item at the end of the edge"""
  node: Artwork

  """A cursor for use in pagination"""
  cursor: String!
}

"""作品の年齢制限 (全年齢/R-18/R-18G) を表すenum"""
enum ArtworkRatingEnum {
  safe
  r_18
  r_18g
}

"""An enumeration."""
enum ArtworkSortEnum {
  ID_ASC
  ID_DESC
  ACCOUNT_ID_ASC
  ACCOUNT_ID_DESC
  TITLE_ASC
  TITLE_DESC
  CAPTION_ASC
  CAPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type Comment implements Node {
  """The ID of the object."""
  id: ID!
  text: String!
  accountId: Int!
  artworkId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  artwork: Artwork
}

type CommentConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CommentEdge]!
}

"""A Relay edge containing a `Comment` and its cursor."""
type CommentEdge {
  """The item at the end of the edge"""
  node: Comment

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateCommentInput {
  """コメントをする対象の作品ID"""
  artworkId: ID!

  """コメントの本文"""
  text: String!
  clientMutationId: String
}

type CreateCommentPayload {
  comment: Comment
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DeleteArtworkInput {
  """削除対象の作品のID"""
  id: ID!
  clientMutationId: String
}

type DeleteArtworkPayload {
  deletedArtworkId: ID
  clientMutationId: String
}

type Illust implements Node {
  """The ID of the object."""
  id: ID!
  artworkId: Int!
  filename: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  artwork: Artwork
  imageUrl: String!
  thumbnailUrl: String!
  webpUrl: String!
}

type IllustConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [IllustEdge]!
}

"""A Relay edge containing a `Illust` and its cursor."""
type IllustEdge {
  """The item at the end of the edge"""
  node: Illust

  """A cursor for use in pagination"""
  cursor: String!
}

type Like implements Node {
  """The ID of the object."""
  id: ID!
  accountId: Int!
  artworkId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: Account
  artwork: Artwork
}

input LikeArtworkInput {
  """「いいね」をする対象の作品ID"""
  artworkId: ID!
  clientMutationId: String
}

type LikeArtworkPayload {
  like: Like
  clientMutationId: String
}

type LikeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LikeEdge]!
}

"""A Relay edge containing a `Like` and its cursor."""
type LikeEdge {
  """The item at the end of the edge"""
  node: Like

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  """作品にコメントする"""
  createComment(input: CreateCommentInput!): CreateCommentPayload

  """作品に「いいね」をする"""
  likeArtwork(input: LikeArtworkInput!): LikeArtworkPayload

  """作品をアップロードする"""
  uploadArtwork(input: UploadArtworkInput!): UploadArtworkPayload

  """作品の情報を更新する"""
  updateArtwork(input: UpdateArtworkInput!): UpdateArtworkPayload

  """作品を削除する"""
  deleteArtwork(input: DeleteArtworkInput!): DeleteArtworkPayload

  """ユーザー情報を更新する"""
  updateAccount(input: UpdateAccountInput!): UpdateAccountPayload

  """タグの情報を更新する"""
  updateTag(input: UpdateTagInput!): UpdateTagPayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  nodes(
    """The IDs of the object"""
    ids: [ID!]!
  ): [Node]!
  accounts(sort: [AccountSortEnum], before: String, after: String, first: Int, last: Int): AccountConnection
  artworks(
    """取得する作品の年齢制限。複数指定できる。空リストは指定できない"""
    rating: [ArtworkRatingEnum!]
    sort: [ArtworkSortEnum]
    before: String
    after: String
    first: Int
    last: Int
  ): ArtworkConnection

  """for compatibility"""
  artworkByFolderId(folderId: Int!): Artwork
  viewer: Account
  accountByKmcid(kmcid: String!): Account
  activeAccounts(sort: [AccountSortEnum], before: String, after: String, first: Int, last: Int): AccountConnection
  tagByName(name: String!): Tag
  taggedArtworks(tag: String!, sort: [ArtworkSortEnum], before: String, after: String, first: Int, last: Int): ArtworkConnection
  allTags(sort: [TagSortEnum], before: String, after: String, first: Int, last: Int): TagConnection
  allSlackChannels: [SlackChannel]!
}

type SlackChannel {
  id: String!
  name: String!
}

"""画像をアップロードする際にSlackに共有するかどうかを表すenum"""
enum SlackShareOptionEnum {
  NONE
  SHARE_TO_SLACK
  SHARE_TO_SLACK_WITH_IMAGE
}

type Tag implements Node {
  """The ID of the object."""
  id: ID!
  editFreezed: Boolean!
  canonicalName: String!
  name: String!
  artworksCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  artworks(before: String, after: String, first: Int, last: Int): ArtworkConnection
}

type TagConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TagEdge]!
}

"""A Relay edge containing a `Tag` and its cursor."""
type TagEdge {
  """The item at the end of the edge"""
  node: Tag

  """A cursor for use in pagination"""
  cursor: String!
}

"""An enumeration."""
enum TagSortEnum {
  ID_ASC
  ID_DESC
  EDIT_FREEZED_ASC
  EDIT_FREEZED_DESC
  CANONICAL_NAME_ASC
  CANONICAL_NAME_DESC
  NAME_ASC
  NAME_DESC
  ARTWORKS_COUNT_ASC
  ARTWORKS_COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

input TwitterShareOption {
  """作品をTwitterに共有するかどうか。falseのときは共有されず、他のフィールドも無視される。"""
  share: Boolean!

  """Twitterに共有する際の投稿者の表示名。空文字やnullのときはKMCIDが使われる"""
  username: String
}

input UpdateAccountInput {
  name: String!
  clientMutationId: String
}

type UpdateAccountPayload {
  account: Account
  clientMutationId: String
}

input UpdateArtworkInput {
  """更新対象の作品のID"""
  id: ID!

  """更新後のタイトル"""
  title: String!

  """更新後の説明文"""
  caption: String!

  """更新後のタグ"""
  tags: [String!]!

  """更新後の年齢制限"""
  rating: ArtworkRatingEnum
  clientMutationId: String
}

type UpdateArtworkPayload {
  artwork: Artwork
  clientMutationId: String
}

input UpdateTagInput {
  """更新対象のタグのID"""
  id: ID!

  """更新後のタグの表記"""
  name: String!
  clientMutationId: String
}

type UpdateTagPayload {
  tag: Tag
  clientMutationId: String
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

input UploadArtworkInput {
  """作品のタイトル"""
  title: String!

  """作品の説明文"""
  caption: String!

  """作品に付けるタグ"""
  tags: [String!]!

  """更新後の年齢制限"""
  rating: ArtworkRatingEnum!

  """作品をSlackにシェアするかどうか"""
  shareOption: SlackShareOptionEnum

  """投稿したことを共有するSlackチャンネルのID"""
  channelId: String

  """Twitterへの共有設定。nullのときは共有しない"""
  twitterShareOption: TwitterShareOption

  """アップロードする画像 (GIF/PNG/JPEG形式)"""
  files: [Upload!]!
  clientMutationId: String
}

type UploadArtworkPayload {
  artwork: Artwork
  clientMutationId: String
}
