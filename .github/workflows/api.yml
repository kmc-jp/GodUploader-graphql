name: API

env:
  TZ: Asia/Tokyo
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.3.2"

on:
  push:
    branches:
      - main
    paths:
      - .github/workflows/api.yml
      - api/**
  pull_request:
    paths:
      - .github/workflows/api.yml
      - api/**
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: mysql:8.0.30
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: goduploader_test
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    env:
      DB_URL: mysql+mysqlconnector://root@localhost:3306/goduploader_test
      MYSQL_USER: root
      MYSQL_HOST: localhost
      MYSQL_PORT: 3306
    steps:
      - uses: actions/checkout@v3

      # ref: api/Dockerfile
      - name: install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libjpeg-dev libwebp-dev imagemagick webp

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: ./api/poetry.lock

      - uses: abatilo/actions-poetry@v2.2.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - uses: actions/cache@v3
        with:
          path: api/.venv
          key: ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.PYTHON_VERSION }}-poetry-

      - run: poetry install
        working-directory: ./api

      - name: wait for mysql container to be ready
        run: ./script/wait-for-it.sh -h $MYSQL_HOST -p $MYSQL_PORT
        working-directory: ./api

      - run: poetry run pytest
        working-directory: ./api
        env:
          DB_URL: mysql+mysqlconnector://root@localhost:3306/goduploader_test

  build:
    needs: [test]
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: kmc-jp/goduploader-graphql
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Determine whether to push
        id: determine-push
        run: echo "push=${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value={{sha}}-{{date 'YYYYMMDDHHmmss'}}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./api
          push: ${{ steps.determine-push.outputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api
